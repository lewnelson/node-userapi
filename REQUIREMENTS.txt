REQUIREMENTS

User persistence, CRUD operations on user

Create restful API using GET, PUT, PATCH and POST requests

Collection, GET, POST
/v1/resource/users/

Resource, GET, PUT, PATCH, DELETE
/v1/users/{user_id}

Collections are paginated
{
    count: `signed integer`,
    href: `/v1/users/?page=1, uri path to the current collection response`,
    currentPage: `unsigned integer`,
    nextPage: `string URI path to next page`,
    previousPage: `string URI path to previous page`,
    results: [`collection of user resource objects`]
}

User resource
{
    id: `unsigned integer, unique, primary, readonly`,
    email: `string, unique`,
    forename: `string, not null`,
    surname: `string, not null`,
    created: `timestamp, readonly`,
    lastUpdated: `timestamp, readonly`,
    href: `/v1/users/{user_id}, readonly, link to the resource`
}

Authentication - oAuth2.0
Log requests and assign request id's

collection GET
/v1/users/?page=1 - page optional defaults to 1.
/v1/users/?sort=DESC_email,ASC_forename - will sort descending on email and secondary sort ascending on forename

If page is defined and there are no results for that page and the page is greated than 1 then a 404 should be returned. If there are no results and the page is not defined or the page is 1 then a collection response with empty result set should be returned.

If the endpoint does not support the HTTP method then a 405 response should be returned.

If when creating a new resource or updating an existing resource and providing a duplicate email then a 409 resource conflict response should be returned.

When a user is created successfully i.e. has email, forename and surname then the id, created and lastUpdated fields should be auto generated.

Each time a user is updated lastUpdated timestamp should be updated.

Stack, SQL relational database using orm sequelize. Default the connection to sqlite


PROPOSED SETUP

Service container
 - database
 - logger
 - config
 - environment

Route objects
 - path (optional, cascades to routes and merges)
 - {controller: ControllerObject, method: ControllerObjectMethod}|routes, can be a route or route object, routes have a callback and route groups have collection of routes
 - scopes (optional, cascades to routes and merges)
 - http method
 - resource schema (cascades to routes)
 - name, (unique route name)

Use express framework